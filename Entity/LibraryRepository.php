<?php

namespace Emmedy\H5PBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * LibraryRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class LibraryRepository extends EntityRepository
{
    public function countContentLibrary($libraryId)
    {
        $qb = $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->join('l.contentLibraries', 'cl')
            ->join('cl.content', 'c')
            ->where('l.id = :id')
            ->setParameter('id', $libraryId);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findLatestLibraryVersions()
    {
        $major_versions_sql = <<< EOT
  SELECT hl.machine_name, 
         MAX(hl.major_version) AS major_version
    FROM h5p_library hl
   WHERE hl.runnable = 1
GROUP BY hl.machine_name
EOT;

        $minor_versions_sql = <<< EOT
  SELECT hl2.machine_name,
         hl2.major_version,
         MAX(hl2.minor_version) AS minor_version
    FROM ({$major_versions_sql}) hl1
    JOIN h5p_library hl2
      ON hl1.machine_name = hl2.machine_name
     AND hl1.major_version = hl2.major_version
GROUP BY hl2.machine_name, hl2.major_version
EOT;

        $sql = <<< EOT
  SELECT hl4.id,
         hl4.machine_name AS machine_name,
         hl4.major_version,
         hl4.minor_version,
         hl4.patch_version,
         hl4.restricted,
         hl4.has_icon
    FROM ({$minor_versions_sql}) hl3
    JOIN h5p_library hl4
      ON hl3.machine_name = hl4.machine_name
     AND hl3.major_version = hl4.major_version
     AND hl3.minor_version = hl4.minor_version
GROUP BY hl4.machine_name, hl4.major_version, hl4.minor_version
EOT;

        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();

        $libraryVersions = $stmt->fetchAll();
        foreach ($libraryVersions as &$libraryVersion) {
            $libraryVersion = (object)$libraryVersion;
        }
        return $libraryVersions;





//    // Retrieve latest major version
//    $max_major_version = $connection->select('h5p_libraries', 'h1');
//    $max_major_version->fields('h1', ['machine_name']);
//    $max_major_version->addExpression('MAX(h1.major_version)', 'major_version');
//    $max_major_version->condition('h1.runnable', 1);
//    $max_major_version->groupBy('h1.machine_name');
//
//    // Find latest minor version among the latest major versions
//    $max_minor_version = $connection->select('h5p_libraries', 'h2');
//    $max_minor_version->fields('h2', [
//      'machine_name',
//      'major_version',
//    ]);
//    $max_minor_version->addExpression('MAX(h2.minor_version)', 'minor_version');
//
//    // Join max major version and minor versions
//    $max_minor_version->join($max_major_version, 'h1', "
//      h1.machine_name = h2.machine_name AND
//      h1.major_version = h2.major_version
//    ");
//
//    // Group together on major versions to get latest minor version
//    $max_minor_version->groupBy('h2.machine_name');
//    $max_minor_version->groupBy('h2.major_version');
//
//    // Find latest patch version from latest major and minor version
//    $latest = $connection->select('h5p_libraries', 'h3');
//    $latest->addField('h3', 'library_id', 'id');
//    $latest->fields('h3', [
//      'machine_name',
//      'title',
//      'major_version',
//      'minor_version',
//      'patch_version',
//      'has_icon',
//      'restricted',
//    ]);
//
//    // Join max minor versions with the latest patch version
//    $latest->join($max_minor_version, 'h4', "
//      h4.machine_name = h3.machine_name AND
//      h4.major_version = h3.major_version AND
//      h4.minor_version = h3.minor_version
//    ");
//
//    // Grab the results
//    $results = $latest->execute()->fetchAll();
//    return $results;
    }
}
